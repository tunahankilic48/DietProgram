// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(DietContext))]
    [Migration("20230125095433_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EntityLayer.Address", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<int?>("CityId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("smalldatetime")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasColumnOrder(5)
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("EntityLayer.AppUser", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<DateTime?>("BirtDate")
                        .IsRequired()
                        .HasColumnType("date")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("smalldatetime")
                        .HasColumnOrder(11);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(6);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(2);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .HasColumnType("bit")
                        .HasColumnOrder(10);

                    b.Property<bool?>("IsMale")
                        .IsRequired()
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnOrder(4);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("ModifiedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasColumnOrder(12)
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(7);

                    b.Property<byte[]>("ProfilePhoto")
                        .HasColumnType("varbinary(MAX)")
                        .HasColumnOrder(13);

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("EntityLayer.City", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<int?>("CountryId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("smalldatetime")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Country", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("smalldatetime")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Meal", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("smalldatetime")
                        .HasColumnOrder(5);

                    b.Property<int?>("MealCategoryId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("MealDate")
                        .IsRequired()
                        .HasColumnType("date")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("ModifiedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("MealCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Meal", (string)null);
                });

            modelBuilder.Entity("EntityLayer.MealCategory", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("smalldatetime")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("MealCategory", (string)null);
                });

            modelBuilder.Entity("EntityLayer.MealContent", b =>
                {
                    b.Property<int?>("MealId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("smalldatetime")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("ModifiedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("getdate()");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint")
                        .HasColumnOrder(3);

                    b.HasKey("MealId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("MealContents", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Product", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<short>("Calorie")
                        .HasColumnType("smallint")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("smalldatetime")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("ModifiedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnOrder(2);

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("QuantityPerUnit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("EntityLayer.ProductCategory", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("smalldatetime")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("ModifiedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasColumnOrder(4)
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("ProductCategory", (string)null);
                });

            modelBuilder.Entity("EntityLayer.WeightsAndHeights", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("smalldatetime")
                        .HasColumnOrder(5);

                    b.Property<short>("Height")
                        .HasColumnType("smallint")
                        .HasColumnOrder(2);

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<decimal?>("Weight")
                        .IsRequired()
                        .HasColumnType("decimal(4,1)")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UsersHeightsAndWeights", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Address", b =>
                {
                    b.HasOne("EntityLayer.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("EntityLayer.AppUser", b =>
                {
                    b.HasOne("EntityLayer.Address", "Address")
                        .WithOne("AppUser")
                        .HasForeignKey("EntityLayer.AppUser", "AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("EntityLayer.City", b =>
                {
                    b.HasOne("EntityLayer.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("EntityLayer.Meal", b =>
                {
                    b.HasOne("EntityLayer.MealCategory", "MealCategory")
                        .WithMany("Meals")
                        .HasForeignKey("MealCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.AppUser", "User")
                        .WithMany("Meals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MealCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.MealContent", b =>
                {
                    b.HasOne("EntityLayer.Meal", "Meal")
                        .WithMany("MealContents")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Product", "Product")
                        .WithMany("MealContents")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EntityLayer.Product", b =>
                {
                    b.HasOne("EntityLayer.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("EntityLayer.WeightsAndHeights", b =>
                {
                    b.HasOne("EntityLayer.AppUser", "AppUser")
                        .WithMany("WeightsAndHeights")
                        .HasForeignKey("UserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("EntityLayer.Address", b =>
                {
                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("EntityLayer.AppUser", b =>
                {
                    b.Navigation("Meals");

                    b.Navigation("WeightsAndHeights");
                });

            modelBuilder.Entity("EntityLayer.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("EntityLayer.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("EntityLayer.Meal", b =>
                {
                    b.Navigation("MealContents");
                });

            modelBuilder.Entity("EntityLayer.MealCategory", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("EntityLayer.Product", b =>
                {
                    b.Navigation("MealContents");
                });

            modelBuilder.Entity("EntityLayer.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
